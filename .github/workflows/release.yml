name: Release

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (leave empty for auto-increment)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  checks: read

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip release]')"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag or default to 1.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Extract version number (remove 'v' prefix if present)
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            NEXT_VERSION="${{ github.event.inputs.version }}"
          else
            # Auto-increment patch version
            CURRENT="${{ steps.current_version.outputs.current_version }}"
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION"

      - name: Update POM version
        run: |
          # Update the changelist property to the new version
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.next_version }} -DgenerateBackupPoms=false
          
          # Also update the changelist property in pom.xml
          sed -i 's|<revision>.*</revision>|<revision>${{ steps.next_version.outputs.next_version }}</revision>|' pom.xml

      - name: Build and package
        run: |
          mvn clean package -DskipTests=false -B -V
          
          # Verify HPI file was created
          ls -la target/*.hpi

      - name: Run tests
        run: mvn test -B

      - name: Create Git tag
        run: |
          git add pom.xml
          git commit -m "Release version ${{ steps.next_version.outputs.next_version }}" || true
          git tag -a "v${{ steps.next_version.outputs.next_version }}" -m "Release v${{ steps.next_version.outputs.next_version }}"
          git push origin "v${{ steps.next_version.outputs.next_version }}"

      - name: Generate release notes
        id: release_notes
        run: |
          # Generate changelog since last tag
          LAST_TAG="${{ steps.current_version.outputs.latest_tag }}"
          
          # Get commits since last tag
          if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            CHANGES=$(git log --pretty=format:"- %s (%h)" "$LAST_TAG"..HEAD)
          else
            CHANGES=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi
          
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Release v${{ steps.next_version.outputs.next_version }}
          
          ### Changes
          $CHANGES
          
          ### Installation
          Download the `github-checks.hpi` file and install it through Jenkins Plugin Manager:
          1. Go to **Manage Jenkins** > **Plugins** > **Advanced**
          2. Upload the HPI file in the "Deploy Plugin" section
          3. Restart Jenkins when prompted
          
          ### GitHub Plugin Compatibility
          This release is built against GitHub Plugin v1.43.0. If you're using a different version:
          1. Check your Jenkins server's GitHub Plugin version under **Manage Jenkins** > **Plugins** > **Installed plugins**
          2. Ensure compatibility or rebuild from source if needed
          
          For more information, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next_version.outputs.next_version }}
          name: Release v${{ steps.next_version.outputs.next_version }}
          body_path: release_notes.md
          files: |
            target/github-checks.hpi
          draft: false
          prerelease: false

      - name: Upload to Jenkins Update Center (if configured)
        if: ${{ secrets.MAVEN_USERNAME && secrets.MAVEN_TOKEN }}
        run: |
          # Configure Maven settings for Jenkins repository
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << 'EOF'
          <settings>
            <servers>
              <server>
                <id>repo.jenkins-ci.org</id>
                <username>${{ secrets.MAVEN_USERNAME }}</username>
                <password>${{ secrets.MAVEN_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF
          
          # Deploy to Jenkins repository
          mvn deploy -DskipTests=true -B

      - name: Reset version for development
        run: |
          # Reset changelist to SNAPSHOT for next development cycle
          NEXT_DEV_VERSION="${{ steps.next_version.outputs.next_version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$NEXT_DEV_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          DEV_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
          
          if grep -q "<changelist>" pom.xml; then
            sed -i "s|<changelist>.*</changelist>|<changelist>$DEV_VERSION</changelist>|" pom.xml
          else
            echo "Warning: <changelist> tag not found in pom.xml. Skipping version update."
          fi
          
          git add pom.xml
          git commit -m "Prepare for next development iteration: $DEV_VERSION" || true
          git push origin HEAD

      - name: Summary
        run: |
          echo "ðŸš€ Release v${{ steps.next_version.outputs.next_version }} has been created!"
          echo "ðŸ“¦ HPI file: github-checks.hpi"
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.next_version.outputs.next_version }}"